{"ast":null,"code":"var _jsxFileName = \"/Users/a/Desktop/soyHenry/FT-M2-master/08-React-Estado-LifeCycle/homework/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //Se agregó el { useState }\n\nimport \"./App.css\";\nimport Nav from \"./components/Nav.jsx\";\nimport Cards from \"./components/Cards.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  } // function onSearch(ciudad) {\n  //   //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\n  //   //pero de momento agregaremos una ciudad por default para ver que funcione\n  //   console.log(ciudad)\n  //   const ciudadEjemplo = {\n  //     min: 32,\n  //     max: 35,\n  //     img: \"03n\",\n  //     id: 2172797,\n  //     wind: 3.6,\n  //     temp: 300.15,\n  //     name: \"Cairns\",\n  //     weather: \"Clouds\",\n  //     clouds: 40,\n  //     latitud: -16.92,\n  //     longitud: 145.77\n  //   };\n  //   setCities(oldCities => [...oldCities, ciudadEjemplo]);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/a/Desktop/soyHenry/FT-M2-master/08-React-Estado-LifeCycle/homework/src/App.js"],"names":["React","useState","Nav","Cards","App","cities","setCities","apiKey","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAAyC;;AACzC,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMM,MAAM,GAAG,kCAAf;;AAEA,WAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxBC,IAAAA,KAAK,CAAE,oDAAmDD,MAAO,UAASF,MAAO,eAA5E,CAAL,CACGI,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAESG,OAAD,IAAa;AACjB,UAAGA,OAAO,CAACC,IAAR,KAAiBC,SAApB,EAA8B;AAC5B,cAAMP,MAAM,GAAG;AACbQ,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaK,QAAxB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaO,QAAxB,CAFQ;AAGbC,UAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBC,IAHX;AAIbC,UAAAA,EAAE,EAAEZ,OAAO,CAACY,EAJC;AAKbC,UAAAA,IAAI,EAAEb,OAAO,CAACa,IAAR,CAAaC,KALN;AAMbC,UAAAA,IAAI,EAAEf,OAAO,CAACC,IAAR,CAAac,IANN;AAObC,UAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAPD;AAQbN,UAAAA,OAAO,EAAEV,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBT,IARf;AASbgB,UAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,CAAeC,GATV;AAUbC,UAAAA,OAAO,EAAEnB,OAAO,CAACoB,KAAR,CAAcC,GAVV;AAWbC,UAAAA,QAAQ,EAAEtB,OAAO,CAACoB,KAAR,CAAcG;AAXX,SAAf;AAaA/B,QAAAA,SAAS,CAACgC,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe7B,MAAf,CAAd,CAAT;AACD,OAfD,MAeO;AACL8B,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF,KArBH;AAuBC,GA5ByB,CA8B5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAE/B;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEH;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAxDuBD,G;;KAAAA,G","sourcesContent":["import React, { useState } from 'react'; //Se agregó el { useState }\nimport \"./App.css\";\nimport Nav from \"./components/Nav.jsx\";\nimport Cards from \"./components/Cards.jsx\";\n\nexport default function App() {\n  const [cities, setCities] = useState([]);\n  const apiKey = '4ae2636d8dfbdc3044bede63951a019b'\n\n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n\n    }\n\n  // function onSearch(ciudad) {\n  //   //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\n  //   //pero de momento agregaremos una ciudad por default para ver que funcione\n  //   console.log(ciudad)\n  //   const ciudadEjemplo = {\n  //     min: 32,\n  //     max: 35,\n  //     img: \"03n\",\n  //     id: 2172797,\n  //     wind: 3.6,\n  //     temp: 300.15,\n  //     name: \"Cairns\",\n  //     weather: \"Clouds\",\n  //     clouds: 40,\n  //     latitud: -16.92,\n  //     longitud: 145.77\n  //   };\n  //   setCities(oldCities => [...oldCities, ciudadEjemplo]);\n  // }\n\n  return (\n    <div className=\"App\">\n      <Nav onSearch={onSearch}/>\n      <Cards cities={cities}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}